// Mocks generated by Mockito 5.4.5 from annotations
// in daikoon/test/app/view/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:user_repository/user_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  String get displayFullName =>
      (super.noSuchMethod(
            Invocation.getter(#displayFullName),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#displayFullName),
            ),
          )
          as String);

  @override
  String get displayUsername =>
      (super.noSuchMethod(
            Invocation.getter(#displayUsername),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#displayUsername),
            ),
          )
          as String);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  bool get isNewUser =>
      (super.noSuchMethod(Invocation.getter(#isNewUser), returnValue: false)
          as bool);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i2.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.User> get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _i4.Stream<_i2.User>.empty(),
          )
          as _i4.Stream<_i2.User>);

  @override
  _i4.Future<void> logInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#logInWithGoogle, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logOut() =>
      (super.noSuchMethod(
            Invocation.method(#logOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logInWithPassword({
    required String? password,
    String? email,
    String? phone,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logInWithPassword, [], {
              #password: password,
              #email: email,
              #phone: phone,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signUpWithPassword({
    required String? password,
    required String? username,
    String? email,
    String? phone,
    String? pushToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithPassword, [], {
              #password: password,
              #username: username,
              #email: email,
              #phone: phone,
              #pushToken: pushToken,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendPasswordResetEmail({
    required String? email,
    String? redirectTo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {
              #email: email,
              #redirectTo: redirectTo,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resetPassword({
    required String? token,
    required String? email,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [], {
              #token: token,
              #email: email,
              #newPassword: newPassword,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
