name: Bundle android APK

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    env:
      # Setup env variables that will be used throughout the workflow
      JAVA_VERSION: 21.0.1
      FLUTTER_VERSION: 3.27.4
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
      KEYSTORE_PATH: android/upload-keystore.jks
      KEY_PROPS_PATH: android/key.properties
      SERVICE_ACCOUNT_PATH: store_credentials.json
      ENV_PROD_FILE_PATH: packages/env/.env.prod
      ENV_DEV_FILE_PATH: packages/env/.env.dev

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      # Setup Java in the VM
      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Java to compile the Android project
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: Decode Android keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

      - name: Decode Android Service Account
        run: echo "${{ secrets.UPLOAD_SERVICE_ACCOUNT }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}
      
      - name: Create Android key properties
        run: |
          touch ${{ env.KEY_PROPS_PATH }}
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> ${{ env.KEY_PROPS_PATH }}
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> ${{ env.KEY_PROPS_PATH }}
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> ${{ env.KEY_PROPS_PATH }}
          echo "storeFile=${{ env.KEYSTORE_PATH }}" >> ${{ env.KEY_PROPS_PATH }}

      - name: 'Create env file'
        run: |
          touch ${{ env.ENV_PROD_FILE_PATH }}
          touch ${{ env.ENV_DEV_FILE_PATH }}
          echo SUPABASE_URL=${{ secrets.SUPABASE_URL}} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo POWERSYNC_URL=${{ secrets.POWERSYNC_URL }} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo ANDROID_CLIENT_ID=${{ secrets.ANDROID_CLIENT_ID }} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo IOS_CLIENT_ID=${{ secrets.IOS_CLIENT_ID }} >> ${{ env.ENV_PROD_FILE_PATH }}
          echo SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET=${{ secrets.SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET }} >> ${{ env.ENV_PROD_FILE_PATH }}
          cp ${{ env.ENV_PROD_FILE_PATH }} ${{ env.ENV_DEV_FILE_PATH }}

      - name: 📦 Install Melos globally
        run: dart pub global activate melos

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 📣 Bootstrap dependencies using Melos
        run: melos bootstrap

      - name: 🛠️ Run build_runner using Melos
        run: melos run build_runner
      
      - name: 🛠️ Run build_runner in root and test folder
        run: dart run build_runner build

      - name: 🧑‍🏫 Format
        run: melos exec -- dart format lib test

      - name: 🔍 Analyze
        run: melos exec -- flutter analyze lib test --no-fatal-infos

      - name: ✅ Run tests
        run: melos run test --no-select

      - name: 🎁 Build aab
        run: flutter build appbundle --flavor production -t lib/main_production.dart

      # Upload generated aab to project artifacts
      - name: ⬆️ Upload generated aab to the artifacts
        uses: actions/upload-artifact@master
        with:
          name: Releases
          path: ${{ env.AAB_PATH }}

      # Deploy bundle to Google Play internal testing
      - name: 🏬 Deploy to Play Store (Internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ env.SERVICE_ACCOUNT_PATH }}
          packageName: dev.llanas.daikoon
          releaseFiles: ${{ env.AAB_PATH }}
          track: internal
